
    %constinteger integersize   = 4
    %constinteger bytesize      = 1
    %constinteger max event     = 16

{------------------------------------------------------------------------------}
    %recordformat imptrap( %integer start,end,trapep,from, %c
                           %byte %array data(0:15) )

    ! If the imptrap record format is altered then amend trapsize accordingly
    ! Noting the record format for imptrap (4@integer + 16@byte
    ! So, trapsize equals 4*size of(integer) + 16*size of(byte)
    %constinteger trapsize = 4*integersize + 16*bytesize

    %own %record(imptrap) noinfo

    %external %record(imptrap)   %spec trapbase %alias "_imptrapbase"
    %external %record(imptrap)   %spec trapend %alias "_imptrapend"

{------------------------------------------------------------------------------}
    %string(14) %function getprocname( %record(imptrap)%name tp )
        %string(14) procname
        %integer i

        length(procname) = 0
        %for i= 1,1,14 %cycle
            %if (tp_data(i+1) # 0) %start
                length(procname) = length(procname) + 1
                charno(procname,i) = tp_data(i+1)
            %finish
        %repeat

        %result = procname
    %end

{------------------------------------------------------------------------------}
    %routine dumptrapinfo( %record(imptrap)%name tp )
        %integer events,i
        %string(14) procname

        events = (tp_data(1) << 8) + tp_data(0)
        procname = getprocname( tp )

        %if (events # 0) %start
            debugstring( "Event trap start @(".int2ascii(addr(tp),16,0).")" )
            debugstring( " for (start,end)=(".int2ascii(tp_start,16,0).",".int2ascii(tp_end,16,0).") in routine '" )
            debugstring( procname )
            debugstring( "'" )
            debugnewline

            debugstring( "    events=(" )
            %for i = max event - 1,-1,0 %cycle
                %if (((1 << i) & events) # 0) %start
                    debugstring( "1" )
                %else
                    debugstring( "0" )
                %finish
            %repeat
            debugstring( ")" )
            debugstring( "    (trapep,from)=(".int2ascii(tp_trapep,16,0).",".int2ascii(tp_from,16,0).")" )
        %else
            debugstring( "No event trap @(".int2ascii(addr(tp),16,0).")" )
            debugstring( " for (start,end)=(".int2ascii(tp_start,16,0).",".int2ascii(tp_end,16,0).") in routine '" )
            debugstring( procname )
            debugstring( "'" )
        %finish
        debugnewline

    %end

{------------------------------------------------------------------------------}
    %external %routine dumpalltrapinfo
        %record(imptrap)%name tp

        ! We iterate over the table of trap blocks
        !    from __imptrapbase to __imptrapend.
        tp == trapbase

        %while (addr(tp) < addr(trapend)) %cycle
            dumptrapinfo( tp )

            ! We would like to just say "tp++" here, BUT for reasons I can't
            ! fathom, the linker puts one or more 16 byte blocks of zeroes
            ! between the trap entries for different objects.
            tp == record( addr(tp) + trapsize )
        %repeat
    %end
{------------------------------------------------------------------------------}
    %record(imptrap) %map blockinfo( %integer address)
        %record(imptrap)%name tp,found

        ! We search the table of trap blocks.
        ! The compiler does NOT exbed routines, so for a nested routine it will
        ! match the block parameters of all the surrounding blocks too.
        ! However, since the blocks are planted in the order the code actually
        ! appears.
        ! The correct block to match is therefore the LAST one we can match.
        ! When we get to the end of the table, or we find an entry which starts
        ! AFTER our address, we know we must have found the right one.
        tp == trapend
        found == noinfo
        
        %cycle
            %if ((tp_start <= address <= tp_end)) %start
                found == tp
                %exit
            %finish

            ! JDM: Traversing the trap table in decreasing order
            ! So, technically we do a tp--
            tp == record( addr(tp) - trapsize )

            ! Defend against reaching beyond the start of the trap table
            %exit %if (addr(tp) < addr(trapbase))

        %repeat

        %result == found
    %end
{------------------------------------------------------------------------------}
    %external %predicate handler found ( %integer event, address )
        %record(imptrap)%name tp
        %integer trapbit,checkbit

        tp == blockinfo( address )

        ! First form the event trapbits to match in the trap table
        trapbit = 1;
        %if (0 < event) %and (event < max event) %then trapbit = 1 << event

        ! JDM: get the trap mask
        ! form checkbits so that event N = 2^N
        checkbit = (tp_data(1) << 8) + tp_data(0)

        ! will this block catch the event?
        ! JDM: We must have a match of event trapbits
        ! and is the address inside the "defence" zone
        %true %if ((checkbit & trapbit) # 0) %and (tp_start <= address <= tp_end)

        %false
    %end
{------------------------------------------------------------------------------}
    %external %predicate initial entry found ( %integer address )
        %record(imptrap)%name tp
        %string(14) procname

        ! beware if we get a zero address
        %false %if (address = 0)

        ! ok, we could look for a trap
        tp == blockinfo( address )

        ! check we found a real trap
        %false %if (tp == noinfo)

        ! get the routine name containing the event handler
        procname = getprocname( tp )

        ! We have two choices of when to exit the "loop"
        ! (1) if we've reached the %begin..%end program entry point
        !     => a "last-ditch" handler must be in the program
        !     %true %if (procname = "Main Program")
        !
        ! (2) if we've reached the IMP entry point
        !     => a default "last-ditch" handler can be in the runtime system
        !     %true %if (procname = "STARTIMP")
        !
        ! Case (2) is the current choice and an appropriate "last-ditch" event
        ! handler is provided inside the top-level RTL routine "StartImp"
        ! inside the rtl library code file imprtl-main.imp
        !

        ! Exit loop if we've reached the IMP entry point
        %true %if (procname = "STARTIMP")

        %false
    %end
{------------------------------------------------------------------------------}
    %external %string(14) %function handler name( %integer address )
        %record(imptrap)%name tp
        %string(14) procname

        ! find a trap table entry for this address
        tp == blockinfo( address )

        ! get the routine name containing the event handler
        %result = getprocname( tp )
    %end
{------------------------------------------------------------------------------}
    %external %integer %function handler entry address( %integer address )
        %record(imptrap)%name tp

        ! find a trap table entry for this address
        tp == blockinfo( address )

        ! get the routine name containing the event handler
        %result = tp_trapep
    %end
{------------------------------------------------------------------------------}
%endoffile
