{------------------------------------------------------------------------------}
    %external %routine impstrcat ( %byte %name dst, src, %integer len)
        %integer i
        %integer count
        %byte dlen,slen
        %byte %name srcx,dstx

        %if (len = 0) %then len = MAXLENIMPSTRING; ! string(*)name - comes from general %name's etc

        dlen = dst;   ! pick up existing destination length
        slen = src;   ! fetch the source length

        %signal 6,1,1 %if (slen + dlen > len)

        count = slen
        dlen = dlen + count

        ! update the destination count
        dstx == byteinteger( addr( dst) ); ! get the address
        dstx = dlen;                       ! set the new length

        ! copy across the source chars
        %for i = 1,1,count %cycle
            srcx == byteinteger( addr(src) + i )
            dstx == byteinteger( addr(dst) + (dlen - count) + i )
            dstx = srcx
        %repeat
    %end
{------------------------------------------------------------------------------}
{------------------------------------------------------------------------------}
    ! strcmp returns a number comparable to the state of the
    ! strings (-1 = less than, 0 = equal, 1 = more than)
    %external %integer %function impstrcmp ( %byte %name l,r )
        %integer lcount, rcount, index
        %byte lx,rx

        lcount = l; ! pick up the counts
        rcount = r;

        index = 1
        %while (lcount > 0) %and (rcount > 0) %cycle
            lx = byteinteger( addr( l ) + index ); ! get the address
            rx = byteinteger( addr( r ) + index ); ! get the address

            %result =  1 %if (lx > rx)
            %result = -1 %if (rx > lx)

            index = index + 1
            lcount = lcount - 1
            rcount = rcount - 1
        %repeat

        ! here we ran out of characters on one or both sides
        %result =  1 %if (lcount > 0)
        %result = -1 %if (rcount > 0)

        ! if here, the strings are identical
        %result = 0
    %end
{------------------------------------------------------------------------------}
{------------------------------------------------------------------------------}
    %external %routine impstrcpy ( %byte %name dst, src, %integer len)
        %integer i
        %integer count
        %byte dlen,slen
        %byte %name srcx,dstx

        %if (len = 0) %then len = MAXLENIMPSTRING; ! string(*)name - comes from general %name's etc

        dlen = 0;      ! destination length = 0
        slen = src;    ! fetch the source length

        %signal 6,1,2 %if (slen > len)

        count = slen
        dlen = dlen + count;

        ! update the destination count
        dstx == byteinteger( addr( dst) ); ! get the address
        dstx = dlen;                       ! set the new length

        ! copy across the source chars (and the lengths)
        %for i = 1,1,count %cycle
            srcx == byteinteger( addr(src) + i )
            dstx == byteinteger( addr(dst) + i )
            dstx = srcx
        %repeat
    %end
{------------------------------------------------------------------------------}
{------------------------------------------------------------------------------}
    %external %routine impstrjam ( %byte %name dst,src, %integer len)
        %integer i
        %integer count
        %byte slen,dlen
        %byte %name srcx,dstx

        %if (len = 0) %then len = MAXLENIMPSTRING; ! string(*)name - comes from general %name's etc

        dlen = dst;   ! pick up existing destination length
        slen = src;   ! fetch the source length

        %if (slen > len) %start { force the length to fit }
            count = len
        %else
            count = slen
        %finish
        dlen = count

        ! update the destination count
        dstx == byteinteger( addr( dst) ); ! get the address
        dstx = dlen;                       ! set the new length

        ! copy across the source chars (and length) 
        %for i = 1,1,count %cycle
            srcx == byteinteger( addr(src) + i )
            dstx == byteinteger( addr(dst) + i )
            dstx = srcx
        %repeat
    %end
{------------------------------------------------------------------------------}
{------------------------------------------------------------------------------}
    %external %routine impstrjcat ( %byte %name dst,src, %integer len )
        %integer i
        %integer count
        %byte dlen,slen
        %byte %name srcx,dstx

        %if (len = 0) %then len = MAXLENIMPSTRING; ! string(*)name - comes from general %name's etc

        dlen = dst;   ! pick up existing destination length
        slen = src;   ! fetch the source length

        %if ((dlen + slen) > len) %start { force the length to fit }
            count = len - dlen
        %else
            count = slen
        %finish
        dlen = dlen + count

        ! update the destination count
        dstx == byteinteger( addr( dst) ); ! get the address
        dstx = dlen;                       ! set the new length

        ! copy across the source chars
        %for i = 1,1,count %cycle
            srcx == byteinteger( addr(src) + i )
            dstx == byteinteger( addr(dst) + (dlen - count) + i )
            dstx = srcx
        %repeat
    %end
{------------------------------------------------------------------------------}
{------------------------------------------------------------------------------}
    ! IMP resolution - S->A.(B).C; returns 1 for success, 0 for failure
    %external %predicate impstrres ( %byte %name c,b,a,s )
        %integer index, count, i
        %byte slen, alen, blen, clen
        %byte %name sx,ax,bx,cx

        ! Although s,a,b,c are declared equivalent to C format string arrays
        ! we can access a char at index i by x[i]
        ! However the string arrays are formatted as IMP strings
        ! Hence, x[0] contains the length of the string.
        ! And x[x[0]] is therefore the last char in the IMP string.
        ! DANGER, IMP format string arrays are at most 256 chars (1 for length, 255 for actual string text)
        ! DANGER, DANGER. The compiler/programmer may have assigned a lesser size so beware overflow

        ! For all cases S,B unchanged
        ! case 1:   S -> A.(B).C
        !  sub-case 1A: length(B) > length(S) => %false, A,C unchanged
        !  sub-case 1B: B not in S            => %false, A,C unchanged
        !  sub-case 1C: B in S                => %true,  A := S\(B.C), C := S\(A.B)
    
        ! case 2:   S -> A.(B) - all sub-cases C unchanged
        !  sub-case 2A: length(B) > length(S) => %false, A unchanged
        !  sub-case 2B: B not in S            => %false, A unchanged
        !  sub-case 2C: B in S                => %true,  A := S\B

        ! case 3:   S ->   (B).C - all sub-cases A unchanged
        !  sub-case 3A: length(B) > length(S) => %false, C unchanged
        !  sub-case 3B: B not in S            => %false, C unchanged
        !  sub-case 3C: B in S                => %true,  C := S\B

        ! Assume a == %string(255), c == %string(255)
        ! We don't care about the size of s,b since we use length(s), length(b)
        ! Algorithm regards each s,a,b,c as an array of char in memory
        ! where x[MAXLENIMPSTRING+1] == x[0..MAXLENIMPSTRING] and x[0] == length(x)

        ! successively try to fit B into S
        ! initialise A = "" (if addr(A) # 0)

        ! successively try to fit B into S
        sx == byteinteger( addr( s ) )
        bx == byteinteger( addr( b ) )
        slen = s                     ;! pick up respective lengths
        blen = b

        %if (blen > slen) %start ;! can't possibly work
            %false
        %finish

        index = 1
        %while ( (index + blen) <= slen + 1) %cycle
            ! see if there is a match starting from index
            count = 0
            %while (count <= blen) %cycle
                sx == byteinteger( addr(s) + index + count )
                bx == byteinteger( addr(b) + 1 + count )

                %exit %if (sx # bx)

                count = count + 1;
            %repeat

            ! check if a match was found, at offset INDEX
            %if (count = blen) %start

                ! Now to remember the prefix string A in S-> A.(B).C
                %if (addr(a) # 0) %start
                    ! String A has been specified

                    ! declare A's length
                    alen = index - 1

                    ! copy S into A upto just before B starts
                    ax == byteinteger( addr(a) )
                    ax = alen
                    %for i = 1,1,alen %cycle
                        sx == byteinteger( addr(s) + i )
                        ax == byteinteger( addr(a) + i )
                        ax = sx;
                    %repeat
                %finish

                ! Now to remember the postfix string C in S-> A.(B).C
                %if (addr(c) # 0) %start
                    ! String C has been specified

                    ! declare C's length
                    clen = (slen - (alen + blen))

                    ! Ok, we have somewhere to store C
                    cx == byteinteger( addr(c) )
                    cx = clen
                    %for i = 1,1,clen %cycle
                        sx == byteinteger( addr(s) + i + alen + blen )
                        cx == byteinteger( addr(c) + i )
                        cx = sx
                    %repeat
                %finish

                %true
            %finish

            ! here = no match found (as yet!)
            index = index + 1
        %repeat

        %false
    %end
{------------------------------------------------------------------------------}
%endoffile
