{ **************************************** }
{ *                                      * }
{ * Copyright (c) 2020 J.D.McMullin PhD. * }
{   All rights reserved.                 * }
{ *                                      * }
{ **************************************** }
%externalroutine slimibj %alias "__impmain"

    %include "ibjdef.inc"

    %include "ibjconversion.inc"
    %include "symbols.inc"
    %include "labels.inc"

    ! define the layout of ibj records
    %record %format rec obj(%string(255) code)
    %record %format rec data(%integer datum)
    %record %format rec const(%integer datum)
    %record %format rec display(%integer datum)
    %record %format rec jump(%integer labelid)
    %record %format rec jcond(%byte condition, %integer labelid)
    %record %format rec call(%integer labelid)
    %record %format rec label(%integer labelid)
    %record %format rec fixup(%integer fixupid, %byte level, %integer localid, %byte external, %integer refid)
    %record %format rec setfix(%integer fixupid,offset,events,trap,from)
    %record %format rec reqext(%integer symbolid)
    %record %format rec reflabel(%integer labelid, offset)
    %record %format rec refext(%integer symbolid, offset)
    %record %format rec bss(%string(4) offset)
    %record %format rec cotword(%string(4) datum)
    %record %format rec datword(%integer data, count)
    %record %format rec swtword(%integer labelid)
    %record %format rec source(%string(127) name)
    %record %format rec defextcode(%integer externalid)
    %record %format rec defextdata(%integer externalid)
    %record %format rec swt(%integer offset)
    %record %format rec line(%integer lineno)
    %record %format rec absext(%integer symbolid,offset)

    %record %format ibj line(   %integer line id,
                                %integer id,
                                %byte valid,
                                %byte itype,
                                (   %name empty %or
                                    %record(rec obj)%name obj %or
                                    %record(rec data)%name data %or
                                    %record(rec const)%name const %or
                                    %record(rec display)%name display %or
                                    %record(rec jump)%name jump %or
                                    %record(rec jcond)%name jcond %or
                                    %record(rec call)%name call %or
                                    %record(rec label)%name label %or
                                    %record(rec fixup)%name fixup %or
                                    %record(rec setfix)%name setfix %or
                                    %record(rec reqext)%name reqext %or
                                    %record(rec reflabel)%name reflabel %or
                                    %record(rec refext)%name refext %or
                                    %record(rec bss)%name bss %or
                                    %record(rec cotword)%name cotword %or
                                    %record(rec datword)%name datword %or
                                    %record(rec swtword)%name swtword %or
                                    %record(rec source)%name source %or
                                    %record(rec defextcode)%name defextcode %or
                                    %record(rec defextdata)%name defextdata %or
                                    %record(rec swt)%name swt %or
                                    %record(rec line)%name line %or
                                    %record(rec absext)%name absext ) )

    %constbyte IBJ      = 1;  { valid for modein, modeout }
    %constbyte RECORD   = 2;  { valid for modein, modeout }
    %constbyte DUMP     = 3;  { only valid for modeout }

    ! Declare the largest count of ibj records expected
    %constinteger max records = 150000
    ! Make space for the collection of ibj records  
    %record(ibj line)%array item(1:max records)
    %integer line count

    ! I/O data for ibjfile(line id )
    ! RECORD+DUMP takes ibjfile(line id )_XXX and writes to data items
    ! IBJ+DUMP takes a textual IBJ entry and converts to human readable text
    ! IBJ+RECORD takes a textual IBJ entry and writes to data items
    ! RECORD+IBJ takes ibjfile(line id )_XXX and reconstructs a textual IBJ entry

    %integer input overflow = 0

    %integer slim mode = 0

    %integer %array itype count(IF OBJ:IF ABSEXT)

!----------------------------------------------------------------------
! show itype counts
!----------------------------------------------------------------------
    %routine show itype counts( %integer all)
        %integer i
        %byte itype,valid

        ! clear the itype counts
        %for i=IF OBJ,1,IF ABSEXT %cycle
            itype count(i) = 0
        %repeat

        ! Examine each IBJ record
        %for i = 1,1,line count %cycle
            itype = item( i )_itype
            valid = item( i )_valid
            ! all = 1 means count every ibj record
            ! all = 0 means only count the valid ibj records
            %if (all = 1) %or ((all = 0) %and (valid = 1)) %start
               itype count( itype ) = itype count( itype ) + 1
            %finish
        %repeat

        newline
        %if (all = 1) %start
            print string( "Counts of the IBJ types of every record")
        %finish %else %start
            print string( "Counts of the IBJ types of valid records")
        %finish
        newline

        %for i=IF OBJ,1,IF ABSEXT %cycle
            print string( itos(itype count(i),5) )
            print string( " = " )
            print string( ibj name(i) )
            newline
        %repeat
    %end

!----------------------------------------------------------------------
! print header
!----------------------------------------------------------------------
    %routine print header( %integer line id, %byte itype )
        print string( "[" )
        print string( itos( item( line id )_line id,5) )
        print string( "/" )
        print string( itos( item( line id )_id,5) )
        print string( "] " )
        print string( ibj name(itype) )
        print string( "," )
    %end

!----------------------------------------------------------------------
! print ibj
!----------------------------------------------------------------------
    %routine print ibj( %byte itype, %string(255) payload )
        print string( itype2hex(itype) )
        print string( byte2hex( length(payload)//2 ) )
        print string( payload )
        newline
    %end

!----------------------------------------------------------------------
! print dump
!----------------------------------------------------------------------
    %routine print dump( %byte itype, %integer line id, %string(255) payload )
        print header( line id, itype )
        print string( payload )
        newline
    %end

!----------------------------------------------------------------------
! retrieve labelid: Retrieve the label id from the prior LABEL item
!----------------------------------------------------------------------
    %integer %fn retrieve labelid( %integer line id )
        %record(rec label) label
        %integer r

        %if (item( line id )_itype = IF LABEL) %start
            label = item( line id )_label
            r = label_labelid
        %finish %else %start
            r = 0
        %finish

        %result = r
    %end

!----------------------------------------------------------------------
! retrieve externalid: Retrieve the external id from the prior DEFEXTCODE item
!----------------------------------------------------------------------
    %integer %fn retrieve externalid( %integer line id )
        %record(rec defextcode)%name defextcode
        %integer r

!debug string( "Line: " )
!debugstring( itos(line id,0) )

        %if (item( line id )_itype = IF DEFEXTCODE) %start
!debug string( " is a DEFEXTCODE as expected" )
!debug newline
            defextcode = item( line id )_defextcode
            r = defextcode_externalid
!debug string( "The externalid = " )
!debug string( itos( defextcode_externalid, 0) )
!debug newline
        %finish %else %start
!debug string( " is not a DEFEXTCODE. This is unexpected" )
!debug newline
            r = 0
        %finish

        %result = r
    %end

!----------------------------------------------------------------------
! IF OBJ
!----------------------------------------------------------------------
    %string(255)%fn obj analysis( %integer line id,
                                  %byte modein,
                                  %byte modeout,
                                  %string(255) aline )
        %switch inmode(IBJ:RECORD)
        %switch outmode(IBJ:DUMP)
        %record(rec obj) obj
        %string(255) payload

        -> inmode(modein)

inmode(IBJ):
        obj_code = hex2code(aline,4)
        -> outmode(modeout)

inmode(RECORD):
        obj = item( line id )_obj
        -> outmode(modeout)

outmode(IBJ):
        payload = obj_code
        -> end analysis

outmode(RECORD):
        item( line id )_obj == new( obj )
        item( line id )_obj =  obj

        payload = aline
        -> end analysis

outmode(DUMP):
        payload = obj_code
        -> end analysis

end analysis:
        %result = payload
    %end

!----------------------------------------------------------------------
! IF DATA
!----------------------------------------------------------------------
    %string(255)%fn data analysis( %integer line id,
                                   %byte modein,
                                   %byte modeout,
                                   %string(255) aline )
        %switch inmode(IBJ:RECORD)
        %switch outmode(IBJ:DUMP)
        %record(rec data) data
        %string(255) payload

        -> inmode(modein)

inmode(IBJ):
        data_datum = hex2integer(aline,4)
        -> outmode(modeout)

inmode(RECORD):
        data = item( line id )_data
        -> outmode(modeout)

outmode(IBJ):
        payload = integer2hex(data_datum)
        -> end analysis

outmode(RECORD):
        item( line id )_data == new( data )
        item( line id )_data =  data

        payload = aline
        -> end analysis

outmode(DUMP):
        payload = itos(data_datum,0)
        -> end analysis

end analysis:
        %result = payload
    %end

!----------------------------------------------------------------------
! IF CONST
!----------------------------------------------------------------------
    %string(255)%fn const analysis( %integer line id,
                                    %byte modein,
                                    %byte modeout,
                                    %string(255) aline )
        %switch inmode(IBJ:RECORD)
        %switch outmode(IBJ:DUMP)
        %record(rec const) const
        %string(255) payload

        -> inmode(modein)

inmode(IBJ):
        const_datum = hex2integer(aline,4)
        -> outmode(modeout)

inmode(RECORD):
        const = item( line id )_const
        -> outmode(modeout)

outmode(IBJ):
        payload = integer2hex(const_datum)
        -> end analysis

outmode(RECORD):
        item( line id )_const == new( const )
        item( line id )_const =  const

        payload = aline
        -> end analysis

outmode(DUMP):
        payload = itos(const_datum,0)
        -> end analysis

end analysis:
        %result = payload
    %end

!----------------------------------------------------------------------
! IF DISPLAY
!----------------------------------------------------------------------
    %string(255)%fn display analysis( %integer line id,
                                      %byte modein,
                                      %byte modeout,
                                      %string(255) aline )
        %switch inmode(IBJ:RECORD)
        %switch outmode(IBJ:DUMP)
        %record(rec display) display
        %string(255) payload

        -> inmode(modein)

inmode(IBJ):
        display_datum = hex2short(aline,4)
        -> outmode(modeout)

inmode(RECORD):
        display = item( line id )_display
        -> outmode(modeout)

outmode(IBJ):
        payload = short2hex(display_datum)
        -> end analysis

outmode(RECORD):
        item( line id )_display == new( display )
        item( line id )_display =  display

        payload = aline
        -> end analysis

outmode(DUMP):
        payload = itos(display_datum,0)
        -> end analysis

end analysis:
        %result = payload
    %end

!----------------------------------------------------------------------
! IF JUMP
!----------------------------------------------------------------------
    %string(255)%fn jump analysis( %integer line id,
                                   %byte modein,
                                   %byte modeout,
                                   %string(255) aline )
        %switch inmode(IBJ:RECORD)
        %switch outmode(IBJ:DUMP)
        %record(rec jump) jump
        %string(255) payload

        -> inmode(modein)

inmode(IBJ):
        jump_labelid = hex2short(aline,4)
        -> outmode(modeout)

inmode(RECORD):
        jump = item( line id )_jump
        -> outmode(modeout)

outmode(IBJ):
        payload = short2hex( jump_labelid )
        -> end analysis

outmode(RECORD):
        reference label( jump_labelid )

        item( line id )_jump == new( jump )
        item( line id )_jump =  jump

        payload = aline
        -> end analysis

outmode(DUMP):
        payload = itos(jump_labelid,0)
        -> end analysis

end analysis:
        %result = payload
    %end

!----------------------------------------------------------------------
! IF JCOND
!----------------------------------------------------------------------
    %string(255)%fn jcond analysis( %integer line id,
                                    %byte modein,
                                    %byte modeout,
                                    %string(255) aline )
        %switch inmode(IBJ:RECORD)
        %switch outmode(IBJ:DUMP)
        %record(rec jcond) jcond
        %string(255) payload

        -> inmode(modein)

inmode(IBJ):
        jcond_condition = hex2byte(aline,4)
        jcond_labelid   = hex2short(aline,6)
        -> outmode(modeout)

inmode(RECORD):
        jcond = item( line id )_jcond
        -> outmode(modeout)

outmode(IBJ):
        payload = byte2hex( jcond_condition )
        payload = payload.short2hex( jcond_labelid )
        -> end analysis

outmode(RECORD):
        reference label( jcond_labelid )

        item( line id )_jcond == new( jcond )
        item( line id )_jcond =  jcond

        payload = aline
        -> end analysis

outmode(DUMP):
        payload = condition name( jcond_condition )
        payload = payload.",".itos(jcond_labelid,0)
        -> end analysis

end analysis:
        %result = payload
    %end

!----------------------------------------------------------------------
! IF CALL
!----------------------------------------------------------------------
    %string(255)%fn call analysis( %integer line id,
                                   %byte modein,
                                   %byte modeout,
                                   %string(255) aline )
        %switch inmode(IBJ:RECORD)
        %switch outmode(IBJ:DUMP)
        %record(rec call) call
        %string(255) payload

        -> inmode(modein)

inmode(IBJ):
        call_labelid = hex2short(aline,4)
        -> outmode(modeout)

inmode(RECORD):
        call = item( line id )_call
        -> outmode(modeout)

outmode(IBJ):
        payload = short2hex( call_labelid )
        -> end analysis

outmode(RECORD):
        reference label( call_labelid )

        item( line id )_call  == new( call )
        item( line id )_call  = call

        payload = aline
        -> end analysis

outmode(DUMP):
        payload = itos(call_labelid,0)
        -> end analysis

end analysis:
        %result = payload
    %end

!----------------------------------------------------------------------
! IF LABEL
!----------------------------------------------------------------------
    %string(255)%fn label analysis( %integer line id,
                                    %byte modein,
                                    %byte modeout,
                                    %string(255) aline )
        %switch inmode(IBJ:RECORD)
        %switch outmode(IBJ:DUMP)
        %record(rec label) label
        %string(255) payload

        -> inmode(modein)

inmode(IBJ):
        label_labelid = hex2short(aline,4)
        -> outmode(modeout)

inmode(RECORD):
        label = item( line id )_label
        -> outmode(modeout)

outmode(IBJ):
        payload = short2hex( label_labelid )
        -> end analysis

outmode(RECORD):
        new label( label_labelid,line id )

        item( line id )_label == new( label )
        item( line id )_label =  label

        payload = aline
        -> end analysis

outmode(DUMP):
        payload = itos(label_labelid,0)
        -> end analysis

end analysis:
        %result = payload
    %end

!----------------------------------------------------------------------
! IF FIXUP
!----------------------------------------------------------------------
    %string(255)%fn fixup analysis( %integer line id,
                                    %byte modein,
                                    %byte modeout,
                                    %string(255) aline )
        %switch inmode(IBJ:RECORD)
        %switch outmode(IBJ:DUMP)
        %record(rec fixup) fixup
        %string(255) payload
        %string(127) fixupname

        -> inmode(modein)

inmode(IBJ):
        fixup_fixupid = hex2short(aline,4)
        fixup_level = hex2byte(aline,8)
        fixupname = hex2name(aline,10)
        -> outmode(modeout)

inmode(RECORD):
        fixup = item( line id )_fixup
        -> outmode(modeout)

outmode(IBJ):
        payload = short2hex( fixup_fixupid )
        payload = payload.byte2hex( fixup_level )
        payload = payload.name2hex( get local name(fixup_localid) )
        -> end analysis

outmode(RECORD):
        %if (item( line id - 1)_itype = IF LABEL) %start
            ! LABEL before FIXUP => internal routine
            fixup_refid = retrieve labelid( line id - 1 )
            fixup_external = 0
        %finish %else %if (item( line id - 1)_itype = IF DEFEXTCODE) %start
            ! DEFEXTCODE before FIXUP => external routine
            fixup_refid = retrieve externalid( line id - 1 )
            fixup_external = 1
!debug string( "FIXUP after DEFEXTCODE at line=" )
!debug string( itos(line id - 1,0) )
!debug string( " External id =" )
!debug string( itos( fixup_refid, 0 ) )
!debug newline
        %finish %else %start
            ! default values for FIXUPitem
            fixup_refid = 0
            fixup_external = 0
        %finish

        fixup_localid = new local( line id, fixupname )

        item( line id )_fixup == new( fixup )
        item( line id )_fixup =  fixup

        payload = aline
        -> end analysis

outmode(DUMP):
        payload = itos(fixup_fixupid,0)
        payload = payload.",".itos(fixup_level,0)
        payload = payload.",""".get local name(fixup_localid).""""
        payload = payload.",".itos(fixup_localid,0)

        %if (fixup_refid # 0) %and (fixup_external # 0) %start
            %if (fixup_external = 1) %start
                payload = payload.",DEFEXTCODE=""".get externalname( fixup_refid ).""""
            %finish
            %if (fixup_external = 0) %start
                payload = payload.",LABEL=".itos(fixup_refid,0)
            %finish
        %finish

        -> end analysis

end analysis:
        %result = payload
    %end

!----------------------------------------------------------------------
! IF SETFIX
!----------------------------------------------------------------------
    %string(255)%fn setfix analysis( %integer line id,
                                     %byte modein,
                                     %byte modeout,
                                     %string(255) aline )
        %switch inmode(IBJ:RECORD)
        %switch outmode(IBJ:DUMP)
        %record(rec setfix) setfix
        %string(255) payload

        -> inmode(modein)

inmode(IBJ):
        setfix_fixupid = hex2short(aline,4)
        setfix_offset = hex2short(aline,8)
        setfix_events = hex2short(aline,12)
        setfix_trap = hex2short(aline,16)
        setfix_from = hex2short(aline,20)
        -> outmode(modeout)

inmode(RECORD):
        setfix = item( line id )_setfix
        -> outmode(modeout)

outmode(IBJ):
        payload = short2hex(setfix_fixupid)
        payload = payload.short2hex(setfix_offset)
        payload = payload.short2hex(setfix_events)
        payload = payload.short2hex(setfix_trap)
        payload = payload.short2hex(setfix_from)
        -> end analysis

outmode(RECORD):
        item( line id )_setfix == new( setfix )
        item( line id )_setfix = setfix

        payload = aline
        -> end analysis

outmode(DUMP):
        payload = itos(setfix_fixupid,0)
        payload = payload.",".itos(setfix_offset,0)
        payload = payload.",".itos(setfix_events,0)
        payload = payload.",".itos(setfix_trap,0)
        payload = payload.",".itos(setfix_from,0)
        -> end analysis

end analysis:
        %result = payload
    %end

!----------------------------------------------------------------------
! IF REQEXT
!----------------------------------------------------------------------
    %string(255)%fn reqext analysis( %integer line id,
                                     %byte modein,
                                     %byte modeout,
                                     %string(255) aline )
        %switch inmode(IBJ:RECORD)
        %switch outmode(IBJ:DUMP)
        %record(rec reqext) reqext
        %string(255) payload
        %string(127) symbolname

        -> inmode(modein)

inmode(IBJ):
        symbolname = hex2name(aline,4)
        -> outmode(modeout)

inmode(RECORD):
        reqext = item( line id )_reqext
        -> outmode(modeout)

outmode(IBJ):
        payload = name2hex( get external name( reqext_symbolid ) )
        -> end analysis

outmode(RECORD):
        reqext_symbolid = new external( symbolname )

        item( line id )_reqext == new( reqext )
        item( line id )_reqext = reqext

        payload = aline
        -> end analysis

outmode(DUMP):
        payload = """".get external name( reqext_symbolid ).""""
        -> end analysis
            
end analysis:
        %result = payload
    %end

!----------------------------------------------------------------------
! IF REFLABEL
!----------------------------------------------------------------------
    %string(255)%fn reflabel analysis( %integer line id,
                                       %byte modein,
                                       %byte modeout,
                                       %string(255) aline )
        %switch inmode(IBJ:RECORD)
        %switch outmode(IBJ:DUMP)
        %record(rec reflabel) reflabel
        %string(255) payload

        -> inmode(modein)

inmode(IBJ):
        reflabel_labelid = hex2short(aline,4)
        reflabel_offset  = hex2short(aline,8)
        -> outmode(modeout)

inmode(RECORD):
        reflabel = item( line id )_reflabel
        -> outmode(modeout)

outmode(IBJ):
        payload = short2hex(reflabel_labelid)
        payload = payload.short2hex(reflabel_offset)
        -> end analysis

outmode(RECORD):
        reference label(reflabel_labelid)

        item( line id )_reflabel == new( reflabel )
        item( line id )_reflabel =  reflabel

        payload = aline
        -> end analysis

outmode(DUMP):
        payload = itos(reflabel_labelid,0)
        payload = payload.",".itos(reflabel_offset,0)
        -> end analysis

end analysis:
        %result = payload
    %end

!----------------------------------------------------------------------
! IF REFEXT
!----------------------------------------------------------------------
    %string(255)%fn refext analysis( %integer line id,
                                     %byte modein,
                                     %byte modeout,
                                     %string(255) aline )
        %switch inmode(IBJ:RECORD)
        %switch outmode(IBJ:DUMP)
        %record(rec refext) refext
        %string(255) payload

        -> inmode(modein)

inmode(IBJ):
        refext_symbolid = hex2short(aline,4)
        refext_offset   = hex2short(aline,8)
        -> outmode(modeout)

inmode(RECORD):
        refext = item( line id )_refext
        -> outmode(modeout)

outmode(IBJ):
        payload = short2hex(get external id(refext_symbolid))
        payload = payload.short2hex(refext_offset)
        -> end analysis

outmode(RECORD):
        reference external( refext_symbolid )

        item( line id )_refext == new( refext )
        item( line id )_refext =  refext

        payload = aline
        -> end analysis

outmode(DUMP):
        %if (modein = IBJ) %start
            payload = itos(refext_symbolid,0)
        %finish %else %if (modein = RECORD) %start
            payload = itos( get external id( refext_symbolid ), 0)
            payload = payload.",""".get external name( refext_symbolid ).""""
        %finish
        payload = payload.",".itos(refext_offset,0)
        -> end analysis

end analysis:
        %result = payload
    %end

!----------------------------------------------------------------------
! IF BSS
!----------------------------------------------------------------------
    %string(255)%fn bss analysis( %integer line id,
                                  %byte modein,
                                  %byte modeout,
                                  %string(255) aline )
        %switch inmode(IBJ:RECORD)
        %switch outmode(IBJ:DUMP)
        %record(rec bss) bss
        %string(255) payload

        -> inmode(modein)

inmode(IBJ):
        bss_offset = substring(aline,4,length(aline))
        -> outmode(modeout)

inmode(RECORD):
        bss = item( line id )_bss
        -> outmode(modeout)

outmode(IBJ):
        payload = bss_offset
        -> end analysis

outmode(RECORD):
        item( line id )_bss == new( bss )
        item( line id )_bss =  bss

        payload = aline
        -> end analysis

outmode(DUMP):
        payload = bss_offset
        -> end analysis

end analysis:
        %result = payload
    %end

!----------------------------------------------------------------------
! IF COTWORD
!----------------------------------------------------------------------
    %string(255)%fn cotword analysis( %integer line id,
                                      %byte modein,
                                      %byte modeout,
                                      %string(255) aline )
        %switch inmode(IBJ:RECORD)
        %switch outmode(IBJ:DUMP)
        %record(rec cotword) cotword
        %string(255) payload

        -> inmode(modein)

inmode(IBJ):
        cotword_datum = substring(aline,4,length(aline))
        -> outmode(modeout)

inmode(RECORD):
        cotword = item( line id )_cotword
        -> outmode(modeout)

outmode(IBJ):
        payload = cotword_datum
        -> end analysis

outmode(RECORD):
        item( line id )_cotword == new( cotword )
        item( line id )_cotword =  cotword

        payload = aline
        -> end analysis

outmode(DUMP):
        payload = cotword_datum
        -> end analysis

end analysis:
        %result = payload
    %end

!----------------------------------------------------------------------
! IF DATWORD
!----------------------------------------------------------------------
    %string(255)%fn datword analysis( %integer line id,
                                      %byte modein,
                                      %byte modeout,
                                      %string(255) aline )
        %switch inmode(IBJ:RECORD)
        %switch outmode(IBJ:DUMP)
        %record(rec datword) datword
        %string(255) payload

        -> inmode(modein)

inmode(IBJ):
        datword_data = hex2short(aline,4)
        ! Which format version of DATWORD are we seeing
        %if (length(aline) = 7) %start
            ! This is the original version
            ! with an assumed repetition count of 1
            datword_count = 1
        %finish %else %if (length(aline) = 11) %start
            ! This is the new version
            ! With the repetition count being specified
            ! repetition count range = 1..32767
            datword_count = hex2short(aline,8)
        %finish %else %start
            datword_count = 1
        %finish

        -> outmode(modeout)

inmode(RECORD):
        datword = item( line id )_datword

        -> outmode(modeout)

outmode(IBJ):
        payload = short2hex(datword_data)
        payload = payload.short2hex(datword_count)

        -> end analysis

outmode(RECORD):
        item( line id )_datword == new( datword )
        item( line id )_datword =  datword

        payload = aline
        -> end analysis

outmode(DUMP):
        payload = itos(datword_data,0)
        payload = payload.",".itos(datword_count,0)
        -> end analysis

end analysis:
        %result = payload
    %end

!----------------------------------------------------------------------
! IF SWTWORD
!----------------------------------------------------------------------
    %string(255)%fn swtword analysis( %integer line id,
                                      %byte modein,
                                      %byte modeout,
                                      %string(255) aline )
        %switch inmode(IBJ:RECORD)
        %switch outmode(IBJ:DUMP)
        %record(rec swtword) swtword
        %string(255) payload

        -> inmode(modein)

inmode(IBJ):
        swtword_labelid = hex2short(aline,4)
        -> outmode(modeout)

inmode(RECORD):
        swtword = item( line id )_swtword
        -> outmode(modeout)

outmode(IBJ):
        payload = short2hex(swtword_labelid)
        -> end analysis

outmode(RECORD):
        reference label(swtword_labelid)

        item( line id )_swtword == new( swtword )
        item( line id )_swtword =  swtword

        payload = aline
        -> end analysis

outmode(DUMP):
        payload = itos(swtword_labelid,0)
        -> end analysis

end analysis:
        %result = payload
    %end

!----------------------------------------------------------------------
! IF SOURCE
!----------------------------------------------------------------------
    %string(255)%fn source analysis( %integer line id,
                                     %byte modein,
                                     %byte modeout,
                                     %string(255) aline )
        %switch inmode(IBJ:RECORD)
        %switch outmode(IBJ:DUMP)
        %record(rec source) source
        %string(255) payload

        -> inmode(modein)

inmode(IBJ):
        source_name = hex2name(aline,4)
        -> outmode(modeout)

inmode(RECORD):
        source = item( line id )_source
        -> outmode(modeout)

outmode(IBJ):
        payload = name2hex(source_name)
        -> end analysis

outmode(RECORD):
        item( line id )_source == new( source )
        item( line id )_source =  source

        payload = aline
        -> end analysis

outmode(DUMP):
        payload = """".source_name.""""
        -> end analysis

end analysis:
        %result = payload
    %end

!----------------------------------------------------------------------
! IF DEFEXTCODE
!----------------------------------------------------------------------
    %string(255)%fn defextcode analysis( %integer line id,
                                         %byte modein,
                                         %byte modeout,
                                         %string(255) aline )
        %switch inmode(IBJ:RECORD)
        %switch outmode(IBJ:DUMP)
        %record(rec defextcode) defextcode
        %string(255) payload
        %string(127) externalname

        -> inmode(modein)

inmode(IBJ):
        externalname = hex2name(aline,4)
        -> outmode(modeout)

inmode(RECORD):
        defextcode = item( line id )_defextcode
        -> outmode(modeout)

outmode(IBJ):
        payload = name2hex( get global name( defextcode_externalid ) )
        -> end analysis

outmode(RECORD):
        defextcode_externalid = new global( externalname )

        item( line id )_defextcode == new( defextcode )
        item( line id )_defextcode =  defextcode

        payload = aline
        -> end analysis

outmode(DUMP):
        payload = """".get global name( defextcode_externalid ).""""
        payload = payload.",".itos(defextcode_externalid,0)
        -> end analysis

end analysis:
        %result = payload
    %end

!----------------------------------------------------------------------
! IF DEFEXTDATA
!----------------------------------------------------------------------
    %string(255)%fn defextdata analysis( %integer line id,
                                         %byte modein,
                                         %byte modeout,
                                         %string(255) aline )
        %switch inmode(IBJ:RECORD)
        %switch outmode(IBJ:DUMP)
        %record(rec defextdata) defextdata
        %string(255) payload
        %string(127) externalname

        -> inmode(modein)

inmode(IBJ):
        externalname = hex2name(aline,4)
        -> outmode(modeout)

inmode(RECORD):
        defextdata = item( line id )_defextdata
        -> outmode(modeout)

outmode(IBJ):
        payload = name2hex( get global name( defextdata_externalid ) )
        -> end analysis

outmode(RECORD):
        defextdata_externalid = new global( externalname )

        item( line id )_defextdata == new( defextdata )
        item( line id )_defextdata =  defextdata

        payload = aline
        -> end analysis

outmode(DUMP):
        payload = """".get global name( defextdata_externalid ).""""
        -> end analysis

end analysis:
        %result = payload
    %end

!----------------------------------------------------------------------
! IF SWT
!----------------------------------------------------------------------
    %string(255)%fn swt analysis( %integer line id,
                                  %byte modein,
                                  %byte modeout,
                                  %string(255) aline )
        %switch inmode(IBJ:RECORD)
        %switch outmode(IBJ:DUMP)
        %record(rec swt) swt
        %string(255) payload

        -> inmode(modein)

inmode(IBJ):
        swt_offset = hex2integer(aline,4)
        -> outmode(modeout)

inmode(RECORD):
        swt = item( line id )_swt
        -> outmode(modeout)

outmode(IBJ):
        payload = integer2hex(swt_offset)
        -> end analysis

outmode(RECORD):
        item( line id )_swt == new( swt )
        item( line id )_swt =  swt

        payload = aline
        -> end analysis

outmode(DUMP):
        payload = itos(swt_offset,0)
        -> end analysis

end analysis:
        %result = payload
    %end

!----------------------------------------------------------------------
! IF LINE
!----------------------------------------------------------------------
    %string(255)%fn line analysis( %integer line id,
                                   %byte modein,
                                   %byte modeout,
                                   %string(255) aline )
        %switch inmode(IBJ:RECORD)
        %switch outmode(IBJ:DUMP)
        %record(rec line) line
        %string(255) payload

        -> inmode(modein)

inmode(IBJ):
        line_lineno = hex2short(aline,4)
        -> outmode(modeout)

inmode(RECORD):
        line = item( line id )_line
        -> outmode(modeout)

outmode(IBJ):
        payload = short2hex(line_lineno)
        -> end analysis

outmode(RECORD):
        item( line id )_line == new( line )
        item( line id )_line =  line

        payload = aline
        -> end analysis

outmode(DUMP):
        payload = itos(line_lineno,0)
        -> end analysis

end analysis:
        %result = payload
    %end

!----------------------------------------------------------------------
! IF ABSEXT
!----------------------------------------------------------------------
    %string(255)%fn absext analysis( %integer line id,
                                     %byte modein,
                                     %byte modeout,
                                     %string(255) aline )
        %switch inmode(IBJ:RECORD)
        %switch outmode(IBJ:DUMP)
        %record(rec absext) absext
        %string(255) payload

        -> inmode(modein)

inmode(IBJ):
        absext_symbolid = hex2short(aline,4)
        absext_offset   = hex2short(aline,8)
        -> outmode(modeout)

inmode(RECORD):
        absext = item( line id )_absext
        -> outmode(modeout)

outmode(IBJ):
        payload = short2hex( get external id(absext_symbolid ) )
        payload = payload.short2hex(absext_offset)
        -> end analysis

outmode(RECORD):
        reference external( absext_symbolid )

        item( line id )_absext == new( absext )
        item( line id )_absext =  absext

        payload = aline
        -> end analysis

outmode(DUMP):
        payload = itos( get external id( absext_symbolid ),0)
        payload = payload.",".itos(absext_offset,0)
        %if (modein = RECORD) %start
            payload = payload.",""".get external name( absext_symbolid ).""""
        %finish
        -> end analysis

end analysis:
        %result = payload
    %end

!----------------------------------------------------------------------
! ANALYSE IBJ
!----------------------------------------------------------------------
    %routine analyse ibj( %integer line id,
                           %byte modein,
                           %byte modeout,
                           %string(255) aline )
        %switch pre analysis(IBJ:RECORD)
        %switch post analysis(IBJ:DUMP)
        %switch ibjx(IF OBJ:IF ABSEXT)
        %integer itype
        %string(255) payload

        ! do various initialisations depending on I/O modes
        -> pre analysis(modein)

pre analysis(IBJ):
            itype = (charno(aline,1) - 'A') & 255
        -> end pre analysis

pre analysis(RECORD):
            itype = item( line id)_itype
        -> end pre analysis

end pre analysis:
        -> ibjx(itype)

ibjx(IF OBJ):
        payload = obj analysis( line id, modein, modeout, aline )
        -> xibj

ibjx(IF DATA):
        payload = data analysis( line id, modein, modeout, aline )
        -> xibj

ibjx(IF CONST):
        payload = const analysis( line id, modein, modeout, aline )
        -> xibj

ibjx(IF DISPLAY):
        payload = display analysis( line id, modein, modeout, aline )
        -> xibj

ibjx(IF JUMP):
        payload = jump analysis( line id, modein, modeout, aline )
        -> xibj

ibjx(IF JCOND):
        payload = jcond analysis( line id, modein, modeout, aline )
        -> xibj

ibjx(IF CALL):
        payload = call analysis( line id, modein, modeout, aline )
        -> xibj

ibjx(IF LABEL):
        payload = label analysis( line id, modein, modeout, aline )
        -> xibj

ibjx(IF FIXUP):
        payload = fixup analysis( line id, modein, modeout, aline )
        -> xibj

ibjx(IF SETFIX):
        payload = setfix analysis( line id, modein, modeout, aline )
        -> xibj

ibjx(IF REQEXT):
        payload = reqext analysis( line id, modein, modeout, aline )
        -> xibj

ibjx(IF REFLABEL):
        payload = reflabel analysis( line id, modein, modeout, aline )
        -> xibj

ibjx(IF REFEXT):
        payload = refext analysis( line id, modein, modeout, aline )
        -> xibj

ibjx(IF BSS):
        payload = bss analysis( line id, modein, modeout, aline )
        -> xibj

ibjx(IF COTWORD):
        payload = cotword analysis( line id, modein, modeout, aline )
        -> xibj

ibjx(IF DATWORD):
        payload = datword analysis( line id, modein, modeout, aline )
        -> xibj

ibjx(IF SWTWORD):
        payload = swtword analysis( line id, modein, modeout, aline )
        -> xibj

ibjx(IF SOURCE):
        payload = source analysis( line id, modein, modeout, aline )
        -> xibj

ibjx(IF DEFEXTCODE):
        payload = defextcode analysis( line id, modein, modeout, aline )
        -> xibj

ibjx(IF DEFEXTDATA):
        payload = defextdata analysis( line id, modein, modeout, aline )
        -> xibj

ibjx(IF SWT):
        payload = swt analysis( line id, modein, modeout, aline )
        -> xibj

ibjx(IF LINE):
        payload = line analysis( line id, modein, modeout, aline )
        -> xibj

ibjx(IF ABSEXT):
        payload = absext analysis( line id, modein, modeout, aline )
        -> xibj

xibj:
        -> post analysis(modeout)

post analysis(IBJ):
        print ibj( itype, payload )
        -> end post analysis

post analysis(RECORD):
        item( line id )_itype   = itype
        item( line id )_line id = line id
        item( line id )_id      = 0
        ! all items are initially valid 
        item( line id )_valid   = 1
        -> end post analysis

post analysis(DUMP):
        print dump( itype, line id, payload )
        -> end post analysis

end post analysis:
    %end

!----------------------------------------------------------------------
! read a line
!----------------------------------------------------------------------
    %string(255) %function read a line
        %integer i, count
        %string(255) aline

        aline = "";

        aline = aline.to string(next symbol); skip symbol
        aline = aline.to string(next symbol); skip symbol
        aline = aline.to string(next symbol); skip symbol
        count = hex2byte(aline,2)

        %if (count > 0) %start
            %for i = 1, 1, 2*count %cycle
                aline = aline.to string ( nextsymbol )
                skip symbol
            %repeat
        %finish
        %if (next symbol = nl) %then skip symbol

        %result = aline
    %end

!----------------------------------------------------------------------
! read the file
!----------------------------------------------------------------------
    %routine read the file( %integer debug )
        %string(255) ibjdata

        %while (next symbol # eof) %cycle
            line count = line count + 1
            ibjdata = read a line
            %if (line count > max records) %then input overflow = 1

            %if (debug = 1) %start
                print string( ibjdata )
                newline
            %finish

            %if (input overflow = 0) %start
                analyse ibj( line count, IBJ, RECORD, ibjdata )
            %finish
        %repeat
    %end

!----------------------------------------------------------------------
! prune OBJ items
!----------------------------------------------------------------------
    %routine slim obj items
        %record(rec obj)%name obj1
        %record(rec obj)%name obj2
        %integer i

        print string( "Pruning OBJ records")
        newline
        %for i = line count,-1,2 %cycle
            %if (item(i)_itype = item(i - 1)_itype) %start
                %if (item(i)_itype = IF OBJ) %start
                    obj2 == item(i)_obj
                    obj1 == item(i-1)_obj

                    %if (length(obj1_code) + length(obj2_code) <= 255) %start
                        obj1_code = obj1_code.obj2_code
                        item(i)_valid = 0
                    %finish
                %finish
            %finish
        %repeat
    %end

!----------------------------------------------------------------------
! prune LINE items
!----------------------------------------------------------------------
    %routine slim line items
        %integer i

        print string( "Pruning LINE records")
        newline
        %for i = 2,1,line count %cycle
            %if (item(i)_itype = item(i - 1)_itype) %start
                %if (item(i)_itype = IF LINE) %start
                    item(i-1)_valid = 0
                %finish
            %finish
        %repeat
    %end

!----------------------------------------------------------------------
! update referenced label id
!----------------------------------------------------------------------
    %routine tweak label id( %integer ref item, old id, new id )
        %if (item(ref item)_itype = IF JUMP) %start
            %if (item(ref item)_jump_labelid = oldid) %start
                item(ref item)_jump_labelid = newid
            %finish
        %finish
        %if (item(ref item)_itype = IF JCOND) %start
            %if (item(ref item)_jcond_labelid = oldid) %start
                item(ref item)_jcond_labelid = newid
            %finish
        %finish
        %if (item(ref item)_itype = IF CALL) %start
            %if (item(ref item)_call_labelid = oldid) %start
                item(ref item)_call_labelid = newid
            %finish
        %finish
        %if (item(ref item)_itype = IF REFLABEL) %start
            %if (item(ref item)_reflabel_labelid = oldid) %start
                item(ref item)_reflabel_labelid = newid
            %finish
        %finish
        %if (item(ref item)_itype = IF SWTWORD) %start
            %if (item(ref item)_swtword_labelid = oldid) %start
                item(ref item)_swtword_labelid = newid
            %finish
        %finish
    %end

!----------------------------------------------------------------------
! update label status
!----------------------------------------------------------------------
    %routine tweak label status( %integer def item, ref item, label id )
        %if (item(ref item)_itype = IF JUMP) %start
            %if (item(ref item)_jump_labelid = label id) %then item(def item)_valid = 1
        %finish
        %if (item(ref item)_itype = IF JCOND) %start
            %if (item(ref item)_jcond_labelid = label id) %then item(def item)_valid = 1
        %finish
        %if (item(ref item)_itype = IF CALL) %start
            %if (item(ref item)_call_labelid = label id) %then item(def item)_valid = 1
        %finish
        %if (item(ref item)_itype = IF REFLABEL) %start
            %if (item(ref item)_reflabel_labelid = label id) %then item(def item)_valid = 1
        %finish
        %if (item(ref item)_itype = IF SWTWORD) %start
            %if (item(ref item)_swtword_labelid = label id) %then item(def item)_valid = 1
        %finish
    %end

!----------------------------------------------------------------------
! slim LABEL items
!----------------------------------------------------------------------
    %routine slim label items
        %integer i,j
        %integer oldid, newid

        print string( "Slimming LABEL items")
        newline
        ! For each ibj line
        %for i = 1,1,line count - 1 %cycle
            ! Do we have a LABEL?
            %if (item(i)_itype = IF LABEL) %start

                ! Yes, so remember this labelid
                oldid = item(i)_label_labelid

                ! Case(1) do we have a LABEL with following LABEL
                %if (item(i)_itype = item(i + 1)_itype) %start
                    ! Yes, so tag the item as invalid
                    item(i)_valid = 0

                    ! remember the new label as newid
                    newid = item(i+1)_label_labelid

                    ! Now iterate over all the items
                    ! changing references to oldid to become newid
                    %for j = 1,1,line count %cycle
                        tweak label id( j, old id, new id )
                    %repeat
                %finish

                ! Case(2) Is this label actually used?
                ! We only need to check if case(1) did not invalidate the label
                %if (item(i)_valid = 1) %start
                    ! ASS-U-ME the label is NOT referenced (== unused)
                    item(i)_valid = 0
                    ! Search all the line items for any reference to the label "oldid"
                    ! If we do find a reference then the item label is valid
                    %for j = 1,1,line count %cycle
                        ! Only do the check if the assumption is still FALSE
                        %if (item(i)_valid = 0) %start
                            tweak label status( i,j,old id )
                        %finish
                    %repeat
                %finish

            %finish
        %repeat
    %end

!----------------------------------------------------------------------
! prune REQEXT items
!----------------------------------------------------------------------
    %routine slim reqext items
        %record(rec reqext)%name yy
        %integer i
        %integer symbolid

        print string( "Pruning REQEXT records")
        newline

        update all externals
        %for i = 1,1,line count %cycle
            %if (item(i)_itype = IF REQEXT) %start
                yy == item(i)_reqext
                %if (get external valid( yy_symbolid ) = 0) %start
                    item(i)_valid = 0
                %finish
            %finish
        %repeat
    %end

!----------------------------------------------------------------------
! prune DATWORD items
!----------------------------------------------------------------------
    %routine slim datword items
        %record(rec datword)%name yy,zz
        %integer i

        print string( "Pruning DATWORD records")
        newline

        %for i = 1,1,line count - 1 %cycle
            %if (item(i)_itype = item(i+1)_itype) %and (item(i)_itype = IF DATWORD) %start
                yy == item(i)_datword
                zz == item(i+1)_datword
                %if (yy_data = zz_data) %and (yy_count + zz_count < 32768) %start
                    zz_count = yy_count + zz_count
                    item(i)_valid = 0
                %finish
            %finish
        %repeat
    %end

!----------------------------------------------------------------------
! renumber all items
!----------------------------------------------------------------------
    %routine renumber all items
        %integer i
        %integer validid

        validid = 0
        %for i = 1,1,line count %cycle
            %if (item(i)_valid = 1) %start
                validid = validid + 1
                item(i)_id = validid
            %finish
        %repeat
    %end

!----------------------------------------------------------------------
! adjust data
!----------------------------------------------------------------------
    %routine adjust data( %integer slim mode )

        %if (slim mode&1 # 0) %start
            slim obj items
        %finish

        %if (slim mode&2 # 0) %start
            slim line items
        %finish

        %if (slim mode&4 # 0) %start
            slim label items
            prune labels
        %finish

        %if (slim mode&8 # 0) %start
            slim reqext items
        %finish

        %if (slim mode&16 # 0) %start
            slim datword items
        %finish

        ! renumber the items
        %if (slimmode # 0) %start
            print string( "Renumbering the items" )
            newline
        %finish

        renumber all items
    %end

!----------------------------------------------------------------------
! output new ibj
!----------------------------------------------------------------------
    %routine output new ibj
        %string(255) ibjdata
        %integer i

        ibjdata = ""
        %for i = 1,1,line count %cycle
            %if (item( i )_valid = 1) %start
                analyse ibj( i, RECORD, IBJ, ibjdata )
            %finish
        %repeat
    %end

!----------------------------------------------------------------------
! show record data
!----------------------------------------------------------------------
    %routine show record data( %byte show ibj, show all )
        %string(255) ibjdata
        %integer i

        newline
        print string( "IBJ input file has ".itos(line count,0)." records" )
        newline

        ibjdata = ""
        %for i = 1,1,line count %cycle
            %if (show all = 1) %or (item( i )_valid = 1) %start
                analyse ibj( i, RECORD, DUMP, ibjdata )
            %finish

            %if (show ibj = 1) %start
                analyse ibj( i, RECORD, IBJ, ibjdata )
            %finish
        %repeat

        newline
    %end

!----------------------------------------------------------------------
! validate REQEXT items
!----------------------------------------------------------------------
    %routine validate reqext items
        %record(rec reqext)%name yy
        %integer i
        %integer symbolid

        print string( "Validating REQEXT records")
                newline

        %for i = 1,1,line count %cycle
            %if (item(i)_itype = IF REQEXT) %start
                yy == item(i)_reqext
                item(i)_valid = get external valid( yy_symbolid )
            %finish
        %repeat

    %end

    %routine show pre analyse
        dump externals( 1 )
        dump globals
        dump locals
        dump labels( 1 )
        show itype counts( 1 )
        ! show the individual IBJ records
        show record data( 0, 1 )
    %end

    %routine show post analyse
        dump externals( 0 )
        dump globals
        dump locals
        dump labels( 0 )
        show itype counts( 0 )
        ! show the individual IBJ records
        show record data( 0, 0 )
    %end

!----------------------------------------------------------------------
! initialise structures
!----------------------------------------------------------------------
    %routine initialise structures
        %integer i

        line count = 0
        input overflow = 0

        initialise labels
        initialise externals
        initialise globals
        initialise locals
    %end

!----------------------------------------------------------------------
! main program
!----------------------------------------------------------------------
! declare a few local variables
    %integer i

    ! we want to avoid the end of file event
    ! Check for end of file by examining next symbol
    block eof event

    %if (getargcount > 1) %start
        initialise structures
        ! first read the IBJ file
        openinput(1,getarg(1))
        select input(1)

        read the file( 0 )
        close input

        %if (input overflow = 1) %start
            select output(0)
            newline
            print string( "IBJ file read has ".itos(line count,0)." records" )
            newline
            ! Report input overflow => truncated item array
            print string( " ERROR ERROR ERROR" ); newline 
            print string( "Too many lines in the IBJ file" ); newline
            print string( "Increase max record to at least ".itos(line count,0) )
            newline
        %finish %else %start

            %if (getargcount > 3) %start
                openoutput(2,getarg(3))
                select output(2)
                show pre analyse
            %finish

            slim mode = get env as integer( "IMP_SLIMIBJ" )

            select output(0)
            ! Tweak the item data-structure
            ! potentially:
            ! 1) prune the excess OBJ records      slim mode&1
            ! 2) prune the excess LINE records     slim mode&2
            ! 3) prune the excess LABEL records    slim mode&4
            ! 4) prune the unused REQEXT records   slim mode&8
            ! 5) prune the excess DATWORD records  slim mode&16
            %if (slim mode > 0) %start
                adjust data(slim mode)
            %finish %else %start
                debug newline
                debug string( " WARNING: IMP_SLIMIBJ is undefined as an environment variable" )
                debug newline
                debug string( " Hence NO indication as to what to prune from the input file ".getarg(1) )
                debug newline
                debug newline
            %finish

            %if (getargcount > 4) %start
                openoutput(3,getarg(4))
                select output(3)
                show post analyse
            %finish

            %if (getargcount > 1) %start
                openoutput(1,getarg(2))
                select output(1)
                output new ibj
            %finish
        %finish
    %finish %else %start
        debug string( "Usage: slimibj <infile> <outfile> [<pre compress debug> <post compress debug>?]?" )
        debug newline; debug newline

        debug string( "<infile> = the .ibj format file to be pruned" )
        debug newline; debug newline

        debug string( "<outfile> = the resulting pruned .ibj format file" )
        debug newline; debug newline

        debug string( "<pre compress debug> = optional debug file pre-pruning" )
        debug newline; debug newline

        debug string( "<post compress debug> = optional debug file post-pruning" )
        debug newline; debug newline

        debug string( "IMP_SLIMIBJ is an environment variable that indicates the pruning otions (as bitwise flags)" )
        debug newline
        debug string( "          1 => combine OBJ entries" )
        debug newline
        debug string( "          2 => prune the surplus LINE entries" )
        debug newline
        debug string( "          4 => prune the unused LABEL entries" )
        debug newline
        debug string( "          8 => prune the unused REQEXT entries" )
        debug newline
        debug string( "         16 => prune the surplus DATWORD entries" )
        debug newline
        debug string( " e.g.    15 => prune entries by or'ing 8,4,2,1 options" )
        debug newline; debug newline

        i = getenvindex("IMP_SLIMIBJ")
        %if (i > 0) %start
            debug string( " Currently IMP_SLIMIBJ=".get env(i) )
        %finish %else %start
            debug string( " WARNING: IMP_SLIMIBJ is undefined as an environment variable" )
        %finish
        debug newline; debug newline
    %finish
%end

%endoffile

