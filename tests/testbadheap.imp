%begin
    %const %integer amax = 7

    %record %format x ( %record(x) %name link, ( %byte %integer %array a(0:amax) %or %integer b,c ) )
    %record(x) %name rxx,ryy

    %routine dumpx ( %record(x) %name p, %integer base,delta )
        %integer i,j

        %return %if (base < 1)
		
        %for i = 256*base-delta,1,256*base+delta %cycle
            p_b = i
            p_c = i + 1
            print string ( " p_b := ".itos( p_b, 0 ) )
            print string ( " p_c := ".itos( p_c, 0 ) )
            
            print string ( "  i=".itos( i, 0 )."==>" )
            %for j = 0,1,amax %cycle
                print string ( " a(".itos( j , 0 ).") == ".itos( p_a( j ), 0 ) )
            %repeat
            print string ( " p_b == ".itos( p_b, 0 ) )
            print string ( " p_c == ".itos( p_c, 0 ) )
            newline
        %repeat
    %end

    %integer k

    print string ( "Now to allocate memory" ); newline
    !start with an empty queue
    rxx == nil
    %for k = 0,1,2 %cycle
        ! insert entry at front of queue
        ryy == new ( ryy )
        ryy_link == rxx
        rxx == ryy
        ! dump the queue head entry (just created)
        dumpx ( rxx, 1, k )
        newline;
    %repeat

    print string ( "Now to free memory" ); newline
    k = 20
    %while (rxx ## nil) %and (k > 2) %cycle
        dumpx ( rxx, 1, k )
        newline
        ryy == rxx_link
        dispose( rxx )
        rxx == ryy
        k = k - 1
    %repeat

    -> skip it

skip it:

%end %of %program
